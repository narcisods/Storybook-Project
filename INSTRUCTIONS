app.js instead of server.js

1.  Install Dependencies
    npm i express mongoose connect-mongo express-session express-handlebars dotenv method-override moment morgan passport passport-google-oauth20

Install Dev Dependencies
npm i -D nodemon cross-env

Change "test" script to -
"start": "cross-env NODE_ENV=production node app",
"dev": "cross-env NODE_ENV=devlopment nodemon app"

2.  Set variables in app.js and create config.env with PORT and MONGO_URI
    express
    dotenv

3.  Connect to DB / Database
    Make a db.js and set up
    Declare connectDB variable in app.js
    Do not add useFindAndModify anymore since its not supported by mongoose 6.0 and up

4.  Setup Morgan for logging
    Declare variable and run only in dev mode

5.  Setup express handlebars (view engine)and middleware for it with default: main
    Use exphbs.engine as exphbs is not supported

6.  Setup views and routes
    Create view folder(login.hbs/main.hbs) Setup boilerplate and a {{{body}}} tag
    Create routes folder (index.js)
    Set variables in routes/index.js and set up routes. First use send instead of render to check
    Link routing files to app.js using app.use
    Check if routes work
    In layouts create a dashboard.hbs and a login.hbs and add an h1 with dashboard and login in each respectively
    Then in the index.js change send to render to check if is connecting to the dashboard.hbs/login.hbs

7.  In main.hbs set up fontawesome and materilized (in meta/head)
    Check if font carried over

8.  Set static folder
    Set up middleware in app.js
    Declare/require path module
    Create a public folder -> then a css folder -> then a style.css with a background of black to check if it works
    Link stylesheet to main.hbs /css/style.css
    Check if background is black
    Remove black background if working

9.  Login Layout
    First create a container class div and put the {{{body}}} inside in the main.hbs
    Copy everything from main.hbs and paste in layout/login.hbs
    Change title to login
    Add a login-container class to the container class div
    Then create a card class child in container class
    Then create a card-content child in the card class
    Place the {{{body}}} inside everything
    Then route to index.hbs by going to route/index.js then adding another argument to res.render obj:layout:'login'
    Then in style.css add
    p {
    margin: 10px 0 !important;
    }

.login-container {
width: 400px;
margin-top: 50px;
text-align: center;
}

10. Set up login page template
    Edit views/login.hbs
    Type in -
    <h3><i class="fas fa-book-reader"></i> StoryBooks</h3>
    <div class="section">
        <p class="lead">Create public and private stories from your life</p>
    </div>
    <div class="diver"></div>
    <div class="section">
        <a href="/auth/google" class="btn red darken-1">
            <i class="fab fa-google left"></i> Log in with google
        </a>
    </div>

11. Implement Google Auth
    Go to google cloud console
    Make a project
    api services -> enable api services -> google+ api -> enable -> manage -> credentials - > credentaials in api in services -> create credintals -> oauth client id -> add uri -> http://lcoalhost:3000/auth/google/callback -> create
    Take client ID and client secret and place in config.env
    See below for example
    GOOGLE_CLIENT_ID = 4744449353-k62c3suqrmipupikrr9e2uflsuoaktdc.apps.googleusercontent.com
    GOOGLE_CLIENT_SECERT = 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

12. Setup Passport (strategies)
    find passport-google-oauth20 -> leads to documentation
    Create passport config
    Create passport.js in config folder
    Declare/Require Passport in index.js
    Require passport config
    Setup passport middleware
    Declare/Require express-session
    Setup session middleware
    Setup passport.js

13. Setup User Model
    Create a models folder
    in folder create a User.js
    setup User.js

14. Setup Passsport google strategy in passport.js
    passportjs.org for documentation

15. Setup auth routes
    In the routes folder create a auth.js
    First copy routes/index.js into routes/auth.js
    Declare require passport
    set up router.get /google
    set up router.get /google/callback

16. Save google profile Data
    Go to passport.js and =>
    async(accessToken,refreshToken, profile, done) =>{
    const newUser = {
    googleId: profile.id,
    displayName: profile.displayName,
    firstName: profile.name.givenName,
    lastName: profile.name.familyName,
    image: profile.photos[0].value
    }

            try {
                let user = await User.findOne ({ googleId: profile.id })

                if(user) {
                    done(null,user)
                } else {
                    user = await User.create(newUser)
                    done(null,user)
                }
            } catch (err) {
                console.log(err)
            }
        }))

17. Create Logout
    First create the router.get('/logout') in the auth.js file
    // @desc Logout user
    // @route /auth/logout
    router.get('/logout', (req,res)=>{
    req.logout()
    res.redirect('/')
    })

18. Navigation
    in views create a partials folder
    in the partials folder create a new file \_header.hbs(adding an underscore states its a partial)
    Complete the \_header.hbs Pretty much a navigation bar

Then go to main.hbs

19. Setup Auth Middleware
    Create a new folder called middleware
    Create a new file auth.js
    Complete middleware/auth.js
    Then go to routes/index.js
    Decalare and require ensureAuth, ensureGuest = require ../middleware/auth
    add ensureGuest as an argument to router.get('/')
    add ensureAuth as an arguemnt to router.get('/')

20. Setup the capability to store session data in database
    Declare/require variable in index.js
    const MongoStore = require('connect-mongo')
    const mongoose = require('mongoose')

In routes/index.js to .get('/dashboard')
add name: req.user.firstName, (This will allow us to get their name and use it)

21. Create a story model
    Whenever dealing with a new resource in the db, you need a new model for it
    In /models create a Story.js and copy and paste the schema from models/User.js
    Edit Story.js to fit the story schema

22. Create a place for errors to be caught
    in /views create a folder called errors
    create two files 404.hbs and 500.hbs

23. Create the Stories Dashboard
    In route js declare a story variable
    const Story = require('../models/Story')

then in dashboard insert a try/catch

router.get('/dashboard', ensureAuth, async (req, res) => {
try{
const stories = await Story.find({ user: req.user.id }).lean()
res.render('dashboard',{
name: req.user.firstName,
stories
})
} catch (err) {
console.err(err)
res.render('error/500')
}
})

24. Add the list of stories to dashboard.hbs
    {{#if stories}}
    <table class="striped">
    <thead>
    <tr>
    <th>Title</th>
    <th>Date</th>
    <th>Status</th>
    <th></th>
    </tr>
    </thead>
    <tbody>
    {{#each stories}}
    <tr>
    <td><a href="/stories/{{_id}}"></a>{{title}}</td>
    <td>{{createdAt}}</td>
    <td><span class="dash-status">{{status}}</span></td>
    <td></td>
    </tr>
    </tbody>
    </table>
    {{else}}
    <p>You have not created any stories.</p>
    {{/if}}

25. Create Add button on dashboard
    Create file /views/partials/\_add_btn.hbs

Create the Add Story Section
in views/layouts/main.hbs after the {{> _header}} add {{> _add_btn}}

Create a views/stories folder
Then create views/stories/add.hbs
Compelte add.hbs

Route to add.hbs
Create a routes/stories.js file

copy from routes/index.js
Complete routes/stories.js

Add route to app.js to //Routes
app.use('/stories', require('./routes/stories'))

In main.hbs add
M.FormSelect.init(document.querySelector('#status'))
to script

Add editior to main.hbs in body

<script src="https://cdnjs.cloudflare.com/ajax/libs/ckeditor/4.19.1/ckeditor.js" integrity="sha512-Ooi9IbjM2SIDjQ02ENbPFuuORT8F8Rc+rowcYfLneDwKRxw1+gVVj5tciVmV/APnA/Ys+qy1MbNKK3k2EaAHcw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

Add this to script
CKEDITOR.replace('body',{
plugins: 'wysiwygarea, toolbar, basicstyles, link'
})
Above adds the editor options.

26. Create a post method in routes/stories.js
    in routes/stories.js

Then in app.js create a body parser
app.use(express.urlencoded({extended:false}))
app.use(express.json())

27. Create a handlebar helper to format the date using momentJS
    create a helpers folder
    then create a helper/hbs.js
    complete the file

Then go to app.js and add //Handlebar Helpers
const { formatDate } = require('./helpers/hbs')

Then in handlebars make sure you add the format date
app.engine('.hbs', exphbs.engine({helpers:{
formatDate,
},
defaultLayout: 'main',
extname: '.hbs'
})
)
app.set('view engine', '.hbs')

28. Create a public stories section
    create views/stories/index.hbs
    Complete views/stories/index.hbs

    Then route stories route
    router.get('/', ensureAuth, async (req, res) => {
    try{
    const stories = await Story.find({ status: 'public'})
    .populate('user')
    .sort({createdAt: 'desc'})
    .lean()

          res.render('stories/index', {
              stories,
          })

    } catch (err) {
    console.log(err)
    res.render('error/500')
    }
    })

    In helpers/hbs.js add the truncate, striptags

    Then add stripTags and truncate to the handlebars helpers in the app.js file
    And also the app.engine//handlebars

    Then add them to views/stories/index.hbs
     <p>{{stripTags (truncate body 500)}}</p>

29. Create the edit icon helper
    Add the edit icon to the helper
    Add edit icon to app.js

    In app.js set a global variable for the username
    //Set Global Variable
    app.use(function(req,res,next){
    res.locals.user = req.user || null
    next()
    })

    Add{{{editIcon user ../user _id}}}
    to the card-image class

    Fix css

30. Create the edit page
    Create the route for that edit page in stories.route

        // @desc Show edit page

    // @route GET /stories/edit/:id
    router.get('/edit/:id', ensureAuth, async (req, res) => {
    const story = await Story.findOne({
    \_id: req.params.id
    }).lean()

        if (!story) {
            return res.render('error/404')
        }

        if (story.user != req.user.id) {
            res.redirect('/stories')
        } else {
            res.render('stories/edit', {
                story,
            })
        }

    })

31. Create an views/stories/edit.hbs
    Copy everything from add.hbs into edit.hbs
    Under title add value="{{story.title}}"
    In the text area/body add {{story.body}}

    For the public/private selector you need to add a helper. Also add it to the app.hs in the handlebar helpers sections
    Then add this to the selector
    <select id="status" name="status">
    {{#select story.status}}
    <option value="public" selected>Public</option>
    <option value="private">Private</option>
    {{/select}}
    </select>

32. Create the method override for PUT request
    Declare/require method overide in app.js
    const methodOverride = require('method-override')

        Then add to app.js
        app.use(

    methodOverride(function (req, res) {
    if (req.body && typeof req.body === 'object' && '\_method' in req.body) {
    // look in urlencoded POST bodies and delete it
    let method = req.body.\_method
    delete req.body.\_method
    return method
    }
    })
    )

    Then add to edit.hbs under the method
    <input type="hidden" name="_method" value="PUT">
    Change action to <form action="/stories/{{story._id}}" method="POST" class="col s12">

33. Create the delete method
    In views.dashboard.hbs add the edit and delete button.
    <td>
                <a href="/stories/edit/{{_id}}" class="btn btn-float">
                    <i class="fas fa-edit"></i>
                </a>

                <form action="/stories/{{_id}}" method="POST" id="delete-form">
                    <input type="hidden" name="_method" value="DELETE">
                    <button type="submit" class="btn red">
                        <i class="fas fa-trash"></i>
                    </button>
                </form>

    </td>

    Add any styling to the css

34. Creating routing for delete in routes/stories.js

// @desc Delete story
// @route DELETE /stories/:id
router.delete('/:id', ensureAuth, async (req, res) => {
try {
let story = await Story.findById(req.params.id).lean()

    if (!story) {
      return res.render('error/404')
    }

    if (story.user != req.user.id) {
      res.redirect('/stories')
    } else {
      await Story.remove({ _id: req.params.id })
      res.redirect('/dashboard')
    }

} catch (err) {
console.error(err)
return res.render('error/500')
}
})

35. Create the read story
    Create routing for show single story in route/stories.js

// @desc Show single story
// @route GET /stories/:id
router.get('/:id', ensureAuth, async (req, res) => {
try {
let story = await Story.findById(req.params.id).populate('user').lean()

    if (!story) {
      return res.render('error/404')
    }

    if (story.user._id != req.user.id && story.status == 'private') {
      res.render('error/404')
    } else {
      res.render('stories/show', {
        story,
      })
    }

} catch (err) {
console.error(err)
res.render('error/404')
}
})

Then create a new file views/stories/show.hbs
Complete show.hbs file

36. Create links to user stories
    Create the route in routes/stories.js
    // @desc User stories
    // @route GET /stories/user/:userId
    router.get('/user/:userId', ensureAuth, async (req, res) => {
    try {
    const stories = await Story.find({
    user: req.params.userId,
    status: 'public',
    })
    .populate('user')
    .lean()

        res.render('stories/index', {
          stories,
        })

    } catch (err) {
    console.error(err)
    res.render('error/500')
    }
    })

module.exports = router
